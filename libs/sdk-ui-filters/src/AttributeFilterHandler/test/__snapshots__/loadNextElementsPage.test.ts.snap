// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`AttributeFilterHandler > getNextElementsPageError() should return error 1`] = `[Error: Elements error]`;

exports[`AttributeFilterHandler > getNextElementsPageStatus() should return proper status for failed load > after the load 1`] = `"pending"`;

exports[`AttributeFilterHandler > getNextElementsPageStatus() should return proper status for failed load > before the load 1`] = `"pending"`;

exports[`AttributeFilterHandler > getNextElementsPageStatus() should return proper status for failed load > during the load 1`] = `"pending"`;

exports[`AttributeFilterHandler > getNextElementsPageStatus() should return proper status for successful load > after the load 1`] = `"pending"`;

exports[`AttributeFilterHandler > getNextElementsPageStatus() should return proper status for successful load > before the load 1`] = `"pending"`;

exports[`AttributeFilterHandler > getNextElementsPageStatus() should return proper status for successful load > during the load 1`] = `"pending"`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if it's called and there is still running loadInitialElementsPage() 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() before loadInitialElementsPage() completes.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if it's called before the initialization 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() before successful initialization.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if limit() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if order() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if search() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if setLimitingAttributeFilters() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if setLimitingDateFilters() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if setLimitingMeasures() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should throw error if setLimitingValidationItems() was set before the load 1`] = `[Invariant Violation: Cannot call loadNextElementsPage() when load element options were changed. When options are changed, you should call loadInitialElementsPage() first.]`;

exports[`AttributeFilterHandler > loadNextElementsPage() should trigger onLoadNextElementsPageStart() callback > with parameters 1`] = `
[
  {
    "correlation": "start",
  },
]
`;

exports[`AttributeFilterHandler > loadNextElementsPage() that failed should trigger onLoadNextElementsPageError() callback > with parameters 1`] = `
[
  {
    "correlation": "error",
    "error": [Error: Elements error],
  },
]
`;

exports[`AttributeFilterHandler > loadNextElementsPage() that was canceled by another loadNextElementsPage() call should trigger onLoadNextElementsPageCancel() callback > with parameters 1`] = `
[
  {
    "correlation": "cancel",
  },
]
`;

exports[`AttributeFilterHandler > loadNextElementsPage() that was canceled by cancelLoadNextElementsLoad() call should trigger onLoadNextElementsPageCancel() callback > with parameters 1`] = `
[
  {
    "correlation": "cancel",
  },
]
`;

exports[`AttributeFilterHandler > loadNextElementsPage() that was successful should trigger onLoadNextElementsPageSuccess() callback > with parameters 1`] = `
[
  {
    "cacheId": undefined,
    "context": {
      "attributeFilter": {
        "positiveAttributeFilter": {
          "displayForm": {
            "identifier": "label.f_product.product.name",
            "type": "displayForm",
          },
          "in": {
            "uris": [
              "/gdc/md/referenceworkspace/obj/1054/elements?id=165678",
              "/gdc/md/referenceworkspace/obj/1054/elements?id=165847",
            ],
          },
        },
      },
      "backend": {
        "authenticate": [Function],
        "capabilities": {
          "allowsInconsistentRelations": false,
          "canCalculateGrandTotals": true,
          "canCalculateNativeTotals": true,
          "canCalculateSubTotals": true,
          "canCalculateTotals": true,
          "supportsCsvUploader": true,
          "supportsCustomColorPalettes": true,
          "supportsElementUris": true,
          "supportsElementsQueryParentFiltering": true,
          "supportsEveryoneUserGroupForAccessControl": true,
          "supportsHierarchicalWorkspaces": false,
          "supportsKpiWidget": false,
          "supportsOwners": true,
          "supportsWidgetEntity": true,
        },
        "config": {
          "attributeElementsFiltering": {
            "attributeFilters": {
              "label.f_product.product.name": [Function],
            },
            "dateFilters": {
              "dt_snapshotdate_timestamp.day": [Function],
            },
            "measures": {
              "87a053b0-3947-49f3-b0c5-de53fd01f050": [Function],
            },
          },
        },
        "currentUser": [Function],
        "dataSources": [Function],
        "deauthenticate": [Function],
        "entitlements": [Function],
        "isAuthenticated": [Function],
        "onHostname": [Function],
        "organization": [Function],
        "organizations": [Function],
        "withAuthentication": [Function],
        "withTelemetry": [Function],
        "workspace": [Function],
        "workspaces": [Function],
      },
      "displayAsLabel": undefined,
      "enableDuplicatedLabelValuesInAttributeFilter": undefined,
      "eventListener": [Function],
      "hiddenElements": undefined,
      "staticElements": undefined,
      "workspace": "testWorkspace",
    },
    "correlation": "success",
    "elements": [
      {
        "title": "Explorer",
        "uri": "Explorer",
      },
      {
        "title": "Grammar Plus",
        "uri": "Grammar Plus",
      },
    ],
    "options": {
      "excludePrimaryLabel": false,
      "limit": 2,
      "limitingAttributeFilters": [],
      "limitingDateFilters": [],
      "limitingMeasures": [],
      "limitingValidationItems": [],
      "offset": 2,
      "order": undefined,
      "search": "",
    },
    "totalCount": 7,
  },
]
`;
